// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 2024-05-12 오후 3:21:30 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\OpenAPI\KHOpenAPI.ocx (1)
// LIBID: {6D8C2B4D-EF41-4750-8AD4-C299033833FB}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   KHOpenAPILib_TLBH
#define   KHOpenAPILib_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Khopenapilib_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.2
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_KHOpenAPILib;
extern __declspec (package) const GUID DIID__DKHOpenAPI;
extern __declspec (package) const GUID DIID__DKHOpenAPIEvents;
extern __declspec (package) const GUID CLSID_KHOpenAPI;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{CF20FBB6-EDD4-4BE5-A473-FEF91977DEB6}") _DKHOpenAPI;
typedef TComInterface<_DKHOpenAPI, &DIID__DKHOpenAPI> _DKHOpenAPIPtr;

interface DECLSPEC_UUID("{7335F12D-8973-4BD5-B7F0-12DF03D175B7}") _DKHOpenAPIEvents;
typedef TComInterface<_DKHOpenAPIEvents, &DIID__DKHOpenAPIEvents> _DKHOpenAPIEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _DKHOpenAPI KHOpenAPI;
typedef _DKHOpenAPIPtr KHOpenAPIPtr;

#define LIBID_OF_KHOpenAPI (&LIBID_KHOpenAPILib)
// *********************************************************************//
// Interface: _DKHOpenAPI
// Flags:     (4096) Dispatchable
// GUID:      {CF20FBB6-EDD4-4BE5-A473-FEF91977DEB6}
// *********************************************************************//
interface _DKHOpenAPI : public TDispWrapper<IDispatch>
{
  long __fastcall CommConnect()
  {
    _TDispID _dispid(/* CommConnect */ DISPID(1));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall CommTerminate()
  {
    _TDispID _dispid(/* CommTerminate */ DISPID(2));
    OleProcedure(_dispid);
  }

  long __fastcall CommRqData(WideString sRQName, WideString sTrCode, long nPrevNext, WideString sScreenNo)
  {
    _TDispID _dispid(/* CommRqData */ DISPID(3));
    TAutoArgs<4> _args;
    _args[1] = sRQName /*[VT_WideString:0]*/;
    _args[2] = sTrCode /*[VT_WideString:0]*/;
    _args[3] = nPrevNext /*[VT_I4:0]*/;
    _args[4] = sScreenNo /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetLoginInfo(WideString sTag)
  {
    _TDispID _dispid(/* GetLoginInfo */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = sTag /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SendOrder(WideString sRQName, WideString sScreenNo, WideString sAccNo, long nOrderType, WideString sCode,
                            long nQty, long nPrice, WideString sHogaGb, WideString sOrgOrderNo)
  {
    _TDispID _dispid(/* SendOrder */ DISPID(5));
    TAutoArgs<9> _args;
    _args[1] = sRQName /*[VT_WideString:0]*/;
    _args[2] = sScreenNo /*[VT_WideString:0]*/;
    _args[3] = sAccNo /*[VT_WideString:0]*/;
    _args[4] = nOrderType /*[VT_I4:0]*/;
    _args[5] = sCode /*[VT_WideString:0]*/;
    _args[6] = nQty /*[VT_I4:0]*/;
    _args[7] = nPrice /*[VT_I4:0]*/;
    _args[8] = sHogaGb /*[VT_WideString:0]*/;
    _args[9] = sOrgOrderNo /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SendOrderFO(WideString sRQName, WideString sScreenNo, WideString sAccNo, WideString sCode, long lOrdKind,
                              WideString sSlbyTp, WideString sOrdTp, long lQty, WideString sPrice, WideString sOrgOrdNo)
  {
    _TDispID _dispid(/* SendOrderFO */ DISPID(6));
    TAutoArgs<10> _args;
    _args[1] = sRQName /*[VT_WideString:0]*/;
    _args[2] = sScreenNo /*[VT_WideString:0]*/;
    _args[3] = sAccNo /*[VT_WideString:0]*/;
    _args[4] = sCode /*[VT_WideString:0]*/;
    _args[5] = lOrdKind /*[VT_I4:0]*/;
    _args[6] = sSlbyTp /*[VT_WideString:0]*/;
    _args[7] = sOrdTp /*[VT_WideString:0]*/;
    _args[8] = lQty /*[VT_I4:0]*/;
    _args[9] = sPrice /*[VT_WideString:0]*/;
    _args[10] = sOrgOrdNo /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall SetInputValue(WideString sID, WideString sValue)
  {
	_TDispID _dispid(/* SetInputValue */ DISPID(7));
    TAutoArgs<2> _args;
    _args[1] = sID /*[VT_WideString:0]*/;
    _args[2] = sValue /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  long __fastcall SetOutputFID(WideString sID)
  {
    _TDispID _dispid(/* SetOutputFID */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = sID /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall CommGetData(WideString sJongmokCode, WideString sRealType, WideString sFieldName, long nIndex,
                              WideString sInnerFieldName)
  {
    _TDispID _dispid(/* CommGetData */ DISPID(9));
    TAutoArgs<5> _args;
    _args[1] = sJongmokCode /*[VT_WideString:0]*/;
    _args[2] = sRealType /*[VT_WideString:0]*/;
    _args[3] = sFieldName /*[VT_WideString:0]*/;
    _args[4] = nIndex /*[VT_I4:0]*/;
    _args[5] = sInnerFieldName /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall DisconnectRealData(WideString sScnNo)
  {
    _TDispID _dispid(/* DisconnectRealData */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = sScnNo /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  long __fastcall GetRepeatCnt(WideString sTrCode, WideString sRecordName)
  {
    _TDispID _dispid(/* GetRepeatCnt */ DISPID(11));
    TAutoArgs<2> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    _args[2] = sRecordName /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall CommKwRqData(WideString sArrCode, long bNext, int nCodeCount, int nTypeFlag,
                               WideString sRQName, WideString sScreenNo)
  {
    _TDispID _dispid(/* CommKwRqData */ DISPID(12));
    TAutoArgs<6> _args;
    _args[1] = sArrCode /*[VT_WideString:0]*/;
    _args[2] = bNext /*[VT_I4:0]*/;
    _args[3] = nCodeCount /*[VT_INT:0]*/;
    _args[4] = nTypeFlag /*[VT_INT:0]*/;
    _args[5] = sRQName /*[VT_WideString:0]*/;
    _args[6] = sScreenNo /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetAPIModulePath()
  {
    _TDispID _dispid(/* GetAPIModulePath */ DISPID(13));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetCodeListByMarket(WideString sMarket)
  {
    _TDispID _dispid(/* GetCodeListByMarket */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = sMarket /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetConnectState()
  {
    _TDispID _dispid(/* GetConnectState */ DISPID(15));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetMasterCodeName(WideString sTrCode)
  {
    _TDispID _dispid(/* GetMasterCodeName */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetMasterListedStockCnt(WideString sTrCode)
  {
    _TDispID _dispid(/* GetMasterListedStockCnt */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetMasterConstruction(WideString sTrCode)
  {
    _TDispID _dispid(/* GetMasterConstruction */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetMasterListedStockDate(WideString sTrCode)
  {
    _TDispID _dispid(/* GetMasterListedStockDate */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetMasterLastPrice(WideString sTrCode)
  {
    _TDispID _dispid(/* GetMasterLastPrice */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetMasterStockState(WideString sTrCode)
  {
    _TDispID _dispid(/* GetMasterStockState */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetDataCount(WideString strRecordName)
  {
    _TDispID _dispid(/* GetDataCount */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = strRecordName /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetOutputValue(WideString strRecordName, long nRepeatIdx, long nItemIdx)
  {
    _TDispID _dispid(/* GetOutputValue */ DISPID(23));
    TAutoArgs<3> _args;
    _args[1] = strRecordName /*[VT_WideString:0]*/;
    _args[2] = nRepeatIdx /*[VT_I4:0]*/;
    _args[3] = nItemIdx /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetCommData(WideString strTrCode, WideString strRecordName, long nIndex, WideString strItemName)
  {
    _TDispID _dispid(/* GetCommData */ DISPID(24));
    TAutoArgs<4> _args;
    _args[1] = strTrCode /*[VT_WideString:0]*/;
    _args[2] = strRecordName /*[VT_WideString:0]*/;
    _args[3] = nIndex /*[VT_I4:0]*/;
    _args[4] = strItemName /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetCommRealData(WideString sTrCode, long nFid)
  {
    _TDispID _dispid(/* GetCommRealData */ DISPID(25));
    TAutoArgs<2> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    _args[2] = nFid /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetChejanData(long nFid)
  {
    _TDispID _dispid(/* GetChejanData */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = nFid /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetThemeGroupList(long nType)
  {
    _TDispID _dispid(/* GetThemeGroupList */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = nType /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetThemeGroupCode(WideString strThemeCode)
  {
    _TDispID _dispid(/* GetThemeGroupCode */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = strThemeCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetFutureList()
  {
    _TDispID _dispid(/* GetFutureList */ DISPID(29));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetFutureCodeByIndex(int nIndex)
  {
    _TDispID _dispid(/* GetFutureCodeByIndex */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = nIndex /*[VT_INT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetActPriceList()
  {
    _TDispID _dispid(/* GetActPriceList */ DISPID(31));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetMonthList()
  {
    _TDispID _dispid(/* GetMonthList */ DISPID(32));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetOptionCode(WideString strActPrice, int nCp, WideString strMonth)
  {
    _TDispID _dispid(/* GetOptionCode */ DISPID(33));
    TAutoArgs<3> _args;
    _args[1] = strActPrice /*[VT_WideString:0]*/;
    _args[2] = nCp /*[VT_INT:0]*/;
    _args[3] = strMonth /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetOptionCodeByMonth(WideString sTrCode, int nCp, WideString strMonth)
  {
    _TDispID _dispid(/* GetOptionCodeByMonth */ DISPID(34));
    TAutoArgs<3> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    _args[2] = nCp /*[VT_INT:0]*/;
    _args[3] = strMonth /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetOptionCodeByActPrice(WideString sTrCode, int nCp, int nTick)
  {
    _TDispID _dispid(/* GetOptionCodeByActPrice */ DISPID(35));
    TAutoArgs<3> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    _args[2] = nCp /*[VT_INT:0]*/;
    _args[3] = nTick /*[VT_INT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSFutureList(WideString strBaseAssetCode)
  {
    _TDispID _dispid(/* GetSFutureList */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = strBaseAssetCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSFutureCodeByIndex(WideString strBaseAssetCode, int nIndex)
  {
    _TDispID _dispid(/* GetSFutureCodeByIndex */ DISPID(37));
    TAutoArgs<2> _args;
    _args[1] = strBaseAssetCode /*[VT_WideString:0]*/;
    _args[2] = nIndex /*[VT_INT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSActPriceList(WideString strBaseAssetGb)
  {
    _TDispID _dispid(/* GetSActPriceList */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSMonthList(WideString strBaseAssetGb)
  {
    _TDispID _dispid(/* GetSMonthList */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSOptionCode(WideString strBaseAssetGb, WideString strActPrice, int nCp, WideString strMonth)
  {
    _TDispID _dispid(/* GetSOptionCode */ DISPID(40));
    TAutoArgs<4> _args;
    _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
    _args[2] = strActPrice /*[VT_WideString:0]*/;
    _args[3] = nCp /*[VT_INT:0]*/;
    _args[4] = strMonth /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSOptionCodeByMonth(WideString strBaseAssetGb, WideString sTrCode, int nCp, WideString strMonth)
  {
    _TDispID _dispid(/* GetSOptionCodeByMonth */ DISPID(41));
    TAutoArgs<4> _args;
    _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
    _args[2] = sTrCode /*[VT_WideString:0]*/;
    _args[3] = nCp /*[VT_INT:0]*/;
    _args[4] = strMonth /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSOptionCodeByActPrice(WideString strBaseAssetGb, WideString sTrCode, int nCp, int nTick)
  {
    _TDispID _dispid(/* GetSOptionCodeByActPrice */ DISPID(42));
    TAutoArgs<4> _args;
    _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
    _args[2] = sTrCode /*[VT_WideString:0]*/;
    _args[3] = nCp /*[VT_INT:0]*/;
    _args[4] = nTick /*[VT_INT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSFOBasisAssetList()
  {
    _TDispID _dispid(/* GetSFOBasisAssetList */ DISPID(43));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetOptionATM()
  {
    _TDispID _dispid(/* GetOptionATM */ DISPID(44));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetSOptionATM(WideString strBaseAssetGb)
  {
    _TDispID _dispid(/* GetSOptionATM */ DISPID(45));
    TAutoArgs<1> _args;
    _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetBranchCodeName()
  {
    _TDispID _dispid(/* GetBranchCodeName */ DISPID(46));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall CommInvestRqData(WideString sMarketGb, WideString sRQName, WideString sScreenNo)
  {
    _TDispID _dispid(/* CommInvestRqData */ DISPID(47));
    TAutoArgs<3> _args;
    _args[1] = sMarketGb /*[VT_WideString:0]*/;
    _args[2] = sRQName /*[VT_WideString:0]*/;
    _args[3] = sScreenNo /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SendOrderCredit(WideString sRQName, WideString sScreenNo, WideString sAccNo, long nOrderType,
                                  WideString sCode, long nQty, long nPrice, WideString sHogaGb, WideString sCreditGb,
                                  WideString sLoanDate, WideString sOrgOrderNo)
  {
    _TDispID _dispid(/* SendOrderCredit */ DISPID(48));
    TAutoArgs<11> _args;
    _args[1] = sRQName /*[VT_WideString:0]*/;
    _args[2] = sScreenNo /*[VT_WideString:0]*/;
    _args[3] = sAccNo /*[VT_WideString:0]*/;
    _args[4] = nOrderType /*[VT_I4:0]*/;
    _args[5] = sCode /*[VT_WideString:0]*/;
    _args[6] = nQty /*[VT_I4:0]*/;
    _args[7] = nPrice /*[VT_I4:0]*/;
    _args[8] = sHogaGb /*[VT_WideString:0]*/;
    _args[9] = sCreditGb /*[VT_WideString:0]*/;
    _args[10] = sLoanDate /*[VT_WideString:0]*/;
    _args[11] = sOrgOrderNo /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall KOA_Functions(WideString sFunctionName, WideString sParam)
  {
    _TDispID _dispid(/* KOA_Functions */ DISPID(49));
    TAutoArgs<2> _args;
    _args[1] = sFunctionName /*[VT_WideString:0]*/;
    _args[2] = sParam /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetInfoData(WideString sInfoData)
  {
    _TDispID _dispid(/* SetInfoData */ DISPID(50));
    TAutoArgs<1> _args;
    _args[1] = sInfoData /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetRealReg(WideString strScreenNo, WideString strCodeList, WideString strFidList, WideString strOptType)
  {
    _TDispID _dispid(/* SetRealReg */ DISPID(51));
    TAutoArgs<4> _args;
    _args[1] = strScreenNo /*[VT_WideString:0]*/;
    _args[2] = strCodeList /*[VT_WideString:0]*/;
    _args[3] = strFidList /*[VT_WideString:0]*/;
    _args[4] = strOptType /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetConditionLoad()
  {
    _TDispID _dispid(/* GetConditionLoad */ DISPID(52));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  WideString __fastcall GetConditionNameList()
  {
    _TDispID _dispid(/* GetConditionNameList */ DISPID(53));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SendCondition(WideString strScrNo, WideString strConditionName, int nIndex, int nSearch)
  {
    _TDispID _dispid(/* SendCondition */ DISPID(54));
    TAutoArgs<4> _args;
    _args[1] = strScrNo /*[VT_WideString:0]*/;
    _args[2] = strConditionName /*[VT_WideString:0]*/;
    _args[3] = nIndex /*[VT_INT:0]*/;
    _args[4] = nSearch /*[VT_INT:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall SendConditionStop(WideString strScrNo, WideString strConditionName, int nIndex)
  {
    _TDispID _dispid(/* SendConditionStop */ DISPID(55));
    TAutoArgs<3> _args;
    _args[1] = strScrNo /*[VT_WideString:0]*/;
    _args[2] = strConditionName /*[VT_WideString:0]*/;
    _args[3] = nIndex /*[VT_INT:0]*/;
    OleProcedure(_dispid, _args);
  }

  VARIANT __fastcall GetCommDataEx(WideString strTrCode, WideString strRecordName)
  {
    _TDispID _dispid(/* GetCommDataEx */ DISPID(56));
    TAutoArgs<2> _args;
    _args[1] = strTrCode /*[VT_WideString:0]*/;
    _args[2] = strRecordName /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall SetRealRemove(WideString strScrNo, WideString strDelCode)
  {
    _TDispID _dispid(/* SetRealRemove */ DISPID(57));
    TAutoArgs<2> _args;
    _args[1] = strScrNo /*[VT_WideString:0]*/;
    _args[2] = strDelCode /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  long __fastcall GetMarketType(WideString sTrCode)
  {
    _TDispID _dispid(/* GetMarketType */ DISPID(58));
    TAutoArgs<1> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


};
// *********************************************************************//
// Interface: _DKHOpenAPIEvents
// Flags:     (4096) Dispatchable
// GUID:      {7335F12D-8973-4BD5-B7F0-12DF03D175B7}
// *********************************************************************//
interface _DKHOpenAPIEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnReceiveTrData(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sRecordName,
                                  WideString sPrevNext, long nDataLength, WideString sErrorCode, WideString sMessage,
                                  WideString sSplmMsg)
  {
    _TDispID _dispid(/* OnReceiveTrData */ DISPID(1));
    TAutoArgs<9> _args;
    _args[1] = sScrNo /*[VT_WideString:0]*/;
    _args[2] = sRQName /*[VT_WideString:0]*/;
    _args[3] = sTrCode /*[VT_WideString:0]*/;
    _args[4] = sRecordName /*[VT_WideString:0]*/;
    _args[5] = sPrevNext /*[VT_WideString:0]*/;
    _args[6] = nDataLength /*[VT_I4:0]*/;
    _args[7] = sErrorCode /*[VT_WideString:0]*/;
    _args[8] = sMessage /*[VT_WideString:0]*/;
    _args[9] = sSplmMsg /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReceiveRealData(WideString sRealKey, WideString sRealType, WideString sRealData)
  {
    _TDispID _dispid(/* OnReceiveRealData */ DISPID(2));
    TAutoArgs<3> _args;
    _args[1] = sRealKey /*[VT_WideString:0]*/;
    _args[2] = sRealType /*[VT_WideString:0]*/;
    _args[3] = sRealData /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReceiveMsg(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sMsg)
  {
    _TDispID _dispid(/* OnReceiveMsg */ DISPID(3));
    TAutoArgs<4> _args;
    _args[1] = sScrNo /*[VT_WideString:0]*/;
    _args[2] = sRQName /*[VT_WideString:0]*/;
    _args[3] = sTrCode /*[VT_WideString:0]*/;
    _args[4] = sMsg /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReceiveChejanData(WideString sGubun, long nItemCnt, WideString sFIdList)
  {
    _TDispID _dispid(/* OnReceiveChejanData */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = sGubun /*[VT_WideString:0]*/;
    _args[2] = nItemCnt /*[VT_I4:0]*/;
    _args[3] = sFIdList /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEventConnect(long nErrCode)
  {
    _TDispID _dispid(/* OnEventConnect */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = nErrCode /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReceiveInvestRealData(WideString sRealKey)
  {
    _TDispID _dispid(/* OnReceiveInvestRealData */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = sRealKey /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReceiveRealCondition(WideString sTrCode, WideString strType, WideString strConditionName,
                                         WideString strConditionIndex)
  {
	_TDispID _dispid(/* OnReceiveRealCondition */ DISPID(7));
	TAutoArgs<4> _args;
    _args[1] = sTrCode /*[VT_WideString:0]*/;
	_args[2] = strType /*[VT_WideString:0]*/;
    _args[3] = strConditionName /*[VT_WideString:0]*/;
    _args[4] = strConditionIndex /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReceiveTrCondition(WideString sScrNo, WideString strCodeList, WideString strConditionName,
                                       int nIndex, int nNext)
  {
    _TDispID _dispid(/* OnReceiveTrCondition */ DISPID(8));
    TAutoArgs<5> _args;
    _args[1] = sScrNo /*[VT_WideString:0]*/;
    _args[2] = strCodeList /*[VT_WideString:0]*/;
    _args[3] = strConditionName /*[VT_WideString:0]*/;
    _args[4] = nIndex /*[VT_INT:0]*/;
    _args[5] = nNext /*[VT_INT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnReceiveConditionVer(long lRet, WideString sMsg)
  {
    _TDispID _dispid(/* OnReceiveConditionVer */ DISPID(9));
    TAutoArgs<2> _args;
    _args[1] = lRet /*[VT_I4:0]*/;
    _args[2] = sMsg /*[VT_WideString:0]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _DKHOpenAPI
// Flags:     (4096) Dispatchable
// GUID:      {CF20FBB6-EDD4-4BE5-A473-FEF91977DEB6}
// *********************************************************************//
template<class T>
class _DKHOpenAPIDispT : public TAutoDriver<_DKHOpenAPI>
{
public:
  _DKHOpenAPIDispT(){}

  _DKHOpenAPIDispT(_DKHOpenAPI *pintf)
  {
    TAutoDriver<_DKHOpenAPI>::Bind(pintf, false);
  }

  _DKHOpenAPIDispT(_DKHOpenAPIPtr pintf)
  {
    TAutoDriver<_DKHOpenAPI>::Bind(pintf, true);
  }

  _DKHOpenAPIDispT& operator=(_DKHOpenAPI *pintf)
  {
    TAutoDriver<_DKHOpenAPI>::Bind(pintf, false);
    return *this;
  }

  _DKHOpenAPIDispT& operator=(_DKHOpenAPIPtr pintf)
  {
    TAutoDriver<_DKHOpenAPI>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_KHOpenAPI));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_KHOpenAPI);
  }

  long            __fastcall CommConnect();
  void            __fastcall CommTerminate();
  long            __fastcall CommRqData(WideString sRQName, WideString sTrCode, long nPrevNext, WideString sScreenNo);
  WideString            __fastcall GetLoginInfo(WideString sTag);
  long            __fastcall SendOrder(WideString sRQName, WideString sScreenNo, WideString sAccNo, long nOrderType,
                                       WideString sCode, long nQty, long nPrice, WideString sHogaGb,
                                       WideString sOrgOrderNo);
  long            __fastcall SendOrderFO(WideString sRQName, WideString sScreenNo, WideString sAccNo, WideString sCode,
                                         long lOrdKind, WideString sSlbyTp, WideString sOrdTp, long lQty,
                                         WideString sPrice, WideString sOrgOrdNo);
  void            __fastcall SetInputValue(WideString sID, WideString sValue);
  long            __fastcall SetOutputFID(WideString sID);
  WideString            __fastcall CommGetData(WideString sJongmokCode, WideString sRealType, WideString sFieldName,
                                         long nIndex, WideString sInnerFieldName);
  void            __fastcall DisconnectRealData(WideString sScnNo);
  long            __fastcall GetRepeatCnt(WideString sTrCode, WideString sRecordName);
  long            __fastcall CommKwRqData(WideString sArrCode, long bNext, int nCodeCount, int nTypeFlag,
                                          WideString sRQName, WideString sScreenNo);
  WideString            __fastcall GetAPIModulePath();
  WideString            __fastcall GetCodeListByMarket(WideString sMarket);
  long            __fastcall GetConnectState();
  WideString            __fastcall GetMasterCodeName(WideString sTrCode);
  long            __fastcall GetMasterListedStockCnt(WideString sTrCode);
  WideString            __fastcall GetMasterConstruction(WideString sTrCode);
  WideString            __fastcall GetMasterListedStockDate(WideString sTrCode);
  WideString            __fastcall GetMasterLastPrice(WideString sTrCode);
  WideString            __fastcall GetMasterStockState(WideString sTrCode);
  long            __fastcall GetDataCount(WideString strRecordName);
  WideString            __fastcall GetOutputValue(WideString strRecordName, long nRepeatIdx, long nItemIdx);
  WideString            __fastcall GetCommData(WideString strTrCode, WideString strRecordName, long nIndex,
                                         WideString strItemName);
  WideString            __fastcall GetCommRealData(WideString sTrCode, long nFid);
  WideString            __fastcall GetChejanData(long nFid);
  WideString            __fastcall GetThemeGroupList(long nType);
  WideString            __fastcall GetThemeGroupCode(WideString strThemeCode);
  WideString            __fastcall GetFutureList();
  WideString            __fastcall GetFutureCodeByIndex(int nIndex);
  WideString            __fastcall GetActPriceList();
  WideString            __fastcall GetMonthList();
  WideString            __fastcall GetOptionCode(WideString strActPrice, int nCp, WideString strMonth);
  WideString            __fastcall GetOptionCodeByMonth(WideString sTrCode, int nCp, WideString strMonth);
  WideString            __fastcall GetOptionCodeByActPrice(WideString sTrCode, int nCp, int nTick);
  WideString            __fastcall GetSFutureList(WideString strBaseAssetCode);
  WideString            __fastcall GetSFutureCodeByIndex(WideString strBaseAssetCode, int nIndex);
  WideString            __fastcall GetSActPriceList(WideString strBaseAssetGb);
  WideString            __fastcall GetSMonthList(WideString strBaseAssetGb);
  WideString            __fastcall GetSOptionCode(WideString strBaseAssetGb, WideString strActPrice, int nCp,
                                            WideString strMonth);
  WideString            __fastcall GetSOptionCodeByMonth(WideString strBaseAssetGb, WideString sTrCode, int nCp,
                                                   WideString strMonth);
  WideString            __fastcall GetSOptionCodeByActPrice(WideString strBaseAssetGb, WideString sTrCode, int nCp,
                                                      int nTick);
  WideString            __fastcall GetSFOBasisAssetList();
  WideString            __fastcall GetOptionATM();
  WideString            __fastcall GetSOptionATM(WideString strBaseAssetGb);
  WideString            __fastcall GetBranchCodeName();
  long            __fastcall CommInvestRqData(WideString sMarketGb, WideString sRQName, WideString sScreenNo);
  long            __fastcall SendOrderCredit(WideString sRQName, WideString sScreenNo, WideString sAccNo,
                                             long nOrderType, WideString sCode, long nQty, long nPrice,
                                             WideString sHogaGb, WideString sCreditGb, WideString sLoanDate,
                                             WideString sOrgOrderNo);
  WideString            __fastcall KOA_Functions(WideString sFunctionName, WideString sParam);
  long            __fastcall SetInfoData(WideString sInfoData);
  long            __fastcall SetRealReg(WideString strScreenNo, WideString strCodeList, WideString strFidList,
                                        WideString strOptType);
  long            __fastcall GetConditionLoad();
  WideString            __fastcall GetConditionNameList();
  long            __fastcall SendCondition(WideString strScrNo, WideString strConditionName, int nIndex,
                                           int nSearch);
  void            __fastcall SendConditionStop(WideString strScrNo, WideString strConditionName, int nIndex);
  VARIANT         __fastcall GetCommDataEx(WideString strTrCode, WideString strRecordName);
  void            __fastcall SetRealRemove(WideString strScrNo, WideString strDelCode);
  long            __fastcall GetMarketType(WideString sTrCode);

};
typedef _DKHOpenAPIDispT<_DKHOpenAPI> _DKHOpenAPIDisp;

// *********************************************************************//
// DispIntf:  _DKHOpenAPIEvents
// Flags:     (4096) Dispatchable
// GUID:      {7335F12D-8973-4BD5-B7F0-12DF03D175B7}
// *********************************************************************//
template <class T>
class _DKHOpenAPIEventsDispT : public TAutoDriver<_DKHOpenAPIEvents>
{
public:
  _DKHOpenAPIEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnReceiveTrData(WideString sScrNo, WideString sRQName, WideString sTrCode,
                                             WideString sRecordName, WideString sPrevNext, long nDataLength,
                                             WideString sErrorCode, WideString sMessage, WideString sSplmMsg);
  void            __fastcall OnReceiveRealData(WideString sRealKey, WideString sRealType, WideString sRealData);
  void            __fastcall OnReceiveMsg(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sMsg);
  void            __fastcall OnReceiveChejanData(WideString sGubun, long nItemCnt, WideString sFIdList);
  void            __fastcall OnEventConnect(long nErrCode);
  void            __fastcall OnReceiveInvestRealData(WideString sRealKey);
  void            __fastcall OnReceiveRealCondition(WideString sTrCode, WideString strType,
                                                    WideString strConditionName, WideString strConditionIndex);
  void            __fastcall OnReceiveTrCondition(WideString sScrNo, WideString strCodeList,
                                                  WideString strConditionName, int nIndex, int nNext);
  void            __fastcall OnReceiveConditionVer(long lRet, WideString sMsg);

};
typedef _DKHOpenAPIEventsDispT<_DKHOpenAPIEvents> _DKHOpenAPIEventsDisp;

// *********************************************************************//
// DispIntf:  _DKHOpenAPI
// Flags:     (4096) Dispatchable
// GUID:      {CF20FBB6-EDD4-4BE5-A473-FEF91977DEB6}
// *********************************************************************//
template <class T> long __fastcall
_DKHOpenAPIDispT<T>::CommConnect()
{
  _TDispID _dispid(*this, OLETEXT("CommConnect"), DISPID(1));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DKHOpenAPIDispT<T>::CommTerminate()
{
  _TDispID _dispid(*this, OLETEXT("CommTerminate"), DISPID(2));
  OleProcedure(_dispid);
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::CommRqData(WideString sRQName, WideString sTrCode, long nPrevNext, WideString sScreenNo)
{
  _TDispID _dispid(*this, OLETEXT("CommRqData"), DISPID(3));
  TAutoArgs<4> _args;
  _args[1] = sRQName /*[VT_WideString:0]*/;
  _args[2] = sTrCode /*[VT_WideString:0]*/;
  _args[3] = nPrevNext /*[VT_I4:0]*/;
  _args[4] = sScreenNo /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetLoginInfo(WideString sTag)
{
  _TDispID _dispid(*this, OLETEXT("GetLoginInfo"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = sTag /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::SendOrder(WideString sRQName, WideString sScreenNo, WideString sAccNo, long nOrderType,
                               WideString sCode, long nQty, long nPrice, WideString sHogaGb, WideString sOrgOrderNo)
{
  _TDispID _dispid(*this, OLETEXT("SendOrder"), DISPID(5));
  TAutoArgs<9> _args;
  _args[1] = sRQName /*[VT_WideString:0]*/;
  _args[2] = sScreenNo /*[VT_WideString:0]*/;
  _args[3] = sAccNo /*[VT_WideString:0]*/;
  _args[4] = nOrderType /*[VT_I4:0]*/;
  _args[5] = sCode /*[VT_WideString:0]*/;
  _args[6] = nQty /*[VT_I4:0]*/;
  _args[7] = nPrice /*[VT_I4:0]*/;
  _args[8] = sHogaGb /*[VT_WideString:0]*/;
  _args[9] = sOrgOrderNo /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::SendOrderFO(WideString sRQName, WideString sScreenNo, WideString sAccNo, WideString sCode,
                                 long lOrdKind, WideString sSlbyTp, WideString sOrdTp, long lQty, WideString sPrice,
                                 WideString sOrgOrdNo)
{
  _TDispID _dispid(*this, OLETEXT("SendOrderFO"), DISPID(6));
  TAutoArgs<10> _args;
  _args[1] = sRQName /*[VT_WideString:0]*/;
  _args[2] = sScreenNo /*[VT_WideString:0]*/;
  _args[3] = sAccNo /*[VT_WideString:0]*/;
  _args[4] = sCode /*[VT_WideString:0]*/;
  _args[5] = lOrdKind /*[VT_I4:0]*/;
  _args[6] = sSlbyTp /*[VT_WideString:0]*/;
  _args[7] = sOrdTp /*[VT_WideString:0]*/;
  _args[8] = lQty /*[VT_I4:0]*/;
  _args[9] = sPrice /*[VT_WideString:0]*/;
  _args[10] = sOrgOrdNo /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DKHOpenAPIDispT<T>::SetInputValue(WideString sID, WideString sValue)
{
  _TDispID _dispid(*this, OLETEXT("SetInputValue"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = sID /*[VT_WideString:0]*/;
  _args[2] = sValue /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::SetOutputFID(WideString sID)
{
  _TDispID _dispid(*this, OLETEXT("SetOutputFID"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = sID /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::CommGetData(WideString sJongmokCode, WideString sRealType, WideString sFieldName, long nIndex,
                                 WideString sInnerFieldName)
{
  _TDispID _dispid(*this, OLETEXT("CommGetData"), DISPID(9));
  TAutoArgs<5> _args;
  _args[1] = sJongmokCode /*[VT_WideString:0]*/;
  _args[2] = sRealType /*[VT_WideString:0]*/;
  _args[3] = sFieldName /*[VT_WideString:0]*/;
  _args[4] = nIndex /*[VT_I4:0]*/;
  _args[5] = sInnerFieldName /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DKHOpenAPIDispT<T>::DisconnectRealData(WideString sScnNo)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectRealData"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = sScnNo /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::GetRepeatCnt(WideString sTrCode, WideString sRecordName)
{
  _TDispID _dispid(*this, OLETEXT("GetRepeatCnt"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  _args[2] = sRecordName /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::CommKwRqData(WideString sArrCode, long bNext, int nCodeCount, int nTypeFlag,
                                  WideString sRQName, WideString sScreenNo)
{
  _TDispID _dispid(*this, OLETEXT("CommKwRqData"), DISPID(12));
  TAutoArgs<6> _args;
  _args[1] = sArrCode /*[VT_WideString:0]*/;
  _args[2] = bNext /*[VT_I4:0]*/;
  _args[3] = nCodeCount /*[VT_INT:0]*/;
  _args[4] = nTypeFlag /*[VT_INT:0]*/;
  _args[5] = sRQName /*[VT_WideString:0]*/;
  _args[6] = sScreenNo /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetAPIModulePath()
{
  _TDispID _dispid(*this, OLETEXT("GetAPIModulePath"), DISPID(13));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetCodeListByMarket(WideString sMarket)
{
  _TDispID _dispid(*this, OLETEXT("GetCodeListByMarket"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = sMarket /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::GetConnectState()
{
  _TDispID _dispid(*this, OLETEXT("GetConnectState"), DISPID(15));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetMasterCodeName(WideString sTrCode)
{
  _TDispID _dispid(*this, OLETEXT("GetMasterCodeName"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::GetMasterListedStockCnt(WideString sTrCode)
{
  _TDispID _dispid(*this, OLETEXT("GetMasterListedStockCnt"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetMasterConstruction(WideString sTrCode)
{
  _TDispID _dispid(*this, OLETEXT("GetMasterConstruction"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetMasterListedStockDate(WideString sTrCode)
{
  _TDispID _dispid(*this, OLETEXT("GetMasterListedStockDate"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetMasterLastPrice(WideString sTrCode)
{
  _TDispID _dispid(*this, OLETEXT("GetMasterLastPrice"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetMasterStockState(WideString sTrCode)
{
  _TDispID _dispid(*this, OLETEXT("GetMasterStockState"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::GetDataCount(WideString strRecordName)
{
  _TDispID _dispid(*this, OLETEXT("GetDataCount"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = strRecordName /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetOutputValue(WideString strRecordName, long nRepeatIdx, long nItemIdx)
{
  _TDispID _dispid(*this, OLETEXT("GetOutputValue"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = strRecordName /*[VT_WideString:0]*/;
  _args[2] = nRepeatIdx /*[VT_I4:0]*/;
  _args[3] = nItemIdx /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetCommData(WideString strTrCode, WideString strRecordName, long nIndex, WideString strItemName)
{
  _TDispID _dispid(*this, OLETEXT("GetCommData"), DISPID(24));
  TAutoArgs<4> _args;
  _args[1] = strTrCode /*[VT_WideString:0]*/;
  _args[2] = strRecordName /*[VT_WideString:0]*/;
  _args[3] = nIndex /*[VT_I4:0]*/;
  _args[4] = strItemName /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetCommRealData(WideString sTrCode, long nFid)
{
  _TDispID _dispid(*this, OLETEXT("GetCommRealData"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  _args[2] = nFid /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetChejanData(long nFid)
{
  _TDispID _dispid(*this, OLETEXT("GetChejanData"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = nFid /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetThemeGroupList(long nType)
{
  _TDispID _dispid(*this, OLETEXT("GetThemeGroupList"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = nType /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetThemeGroupCode(WideString strThemeCode)
{
  _TDispID _dispid(*this, OLETEXT("GetThemeGroupCode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = strThemeCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetFutureList()
{
  _TDispID _dispid(*this, OLETEXT("GetFutureList"), DISPID(29));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetFutureCodeByIndex(int nIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetFutureCodeByIndex"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = nIndex /*[VT_INT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetActPriceList()
{
  _TDispID _dispid(*this, OLETEXT("GetActPriceList"), DISPID(31));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetMonthList()
{
  _TDispID _dispid(*this, OLETEXT("GetMonthList"), DISPID(32));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetOptionCode(WideString strActPrice, int nCp, WideString strMonth)
{
  _TDispID _dispid(*this, OLETEXT("GetOptionCode"), DISPID(33));
  TAutoArgs<3> _args;
  _args[1] = strActPrice /*[VT_WideString:0]*/;
  _args[2] = nCp /*[VT_INT:0]*/;
  _args[3] = strMonth /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetOptionCodeByMonth(WideString sTrCode, int nCp, WideString strMonth)
{
  _TDispID _dispid(*this, OLETEXT("GetOptionCodeByMonth"), DISPID(34));
  TAutoArgs<3> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  _args[2] = nCp /*[VT_INT:0]*/;
  _args[3] = strMonth /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetOptionCodeByActPrice(WideString sTrCode, int nCp, int nTick)
{
  _TDispID _dispid(*this, OLETEXT("GetOptionCodeByActPrice"), DISPID(35));
  TAutoArgs<3> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  _args[2] = nCp /*[VT_INT:0]*/;
  _args[3] = nTick /*[VT_INT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSFutureList(WideString strBaseAssetCode)
{
  _TDispID _dispid(*this, OLETEXT("GetSFutureList"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = strBaseAssetCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSFutureCodeByIndex(WideString strBaseAssetCode, int nIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetSFutureCodeByIndex"), DISPID(37));
  TAutoArgs<2> _args;
  _args[1] = strBaseAssetCode /*[VT_WideString:0]*/;
  _args[2] = nIndex /*[VT_INT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSActPriceList(WideString strBaseAssetGb)
{
  _TDispID _dispid(*this, OLETEXT("GetSActPriceList"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSMonthList(WideString strBaseAssetGb)
{
  _TDispID _dispid(*this, OLETEXT("GetSMonthList"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSOptionCode(WideString strBaseAssetGb, WideString strActPrice, int nCp, WideString strMonth)
{
  _TDispID _dispid(*this, OLETEXT("GetSOptionCode"), DISPID(40));
  TAutoArgs<4> _args;
  _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
  _args[2] = strActPrice /*[VT_WideString:0]*/;
  _args[3] = nCp /*[VT_INT:0]*/;
  _args[4] = strMonth /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSOptionCodeByMonth(WideString strBaseAssetGb, WideString sTrCode, int nCp, WideString strMonth)
{
  _TDispID _dispid(*this, OLETEXT("GetSOptionCodeByMonth"), DISPID(41));
  TAutoArgs<4> _args;
  _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
  _args[2] = sTrCode /*[VT_WideString:0]*/;
  _args[3] = nCp /*[VT_INT:0]*/;
  _args[4] = strMonth /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSOptionCodeByActPrice(WideString strBaseAssetGb, WideString sTrCode, int nCp, int nTick)
{
  _TDispID _dispid(*this, OLETEXT("GetSOptionCodeByActPrice"), DISPID(42));
  TAutoArgs<4> _args;
  _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
  _args[2] = sTrCode /*[VT_WideString:0]*/;
  _args[3] = nCp /*[VT_INT:0]*/;
  _args[4] = nTick /*[VT_INT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSFOBasisAssetList()
{
  _TDispID _dispid(*this, OLETEXT("GetSFOBasisAssetList"), DISPID(43));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetOptionATM()
{
  _TDispID _dispid(*this, OLETEXT("GetOptionATM"), DISPID(44));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetSOptionATM(WideString strBaseAssetGb)
{
  _TDispID _dispid(*this, OLETEXT("GetSOptionATM"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = strBaseAssetGb /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetBranchCodeName()
{
  _TDispID _dispid(*this, OLETEXT("GetBranchCodeName"), DISPID(46));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::CommInvestRqData(WideString sMarketGb, WideString sRQName, WideString sScreenNo)
{
  _TDispID _dispid(*this, OLETEXT("CommInvestRqData"), DISPID(47));
  TAutoArgs<3> _args;
  _args[1] = sMarketGb /*[VT_WideString:0]*/;
  _args[2] = sRQName /*[VT_WideString:0]*/;
  _args[3] = sScreenNo /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::SendOrderCredit(WideString sRQName, WideString sScreenNo, WideString sAccNo, long nOrderType,
                                     WideString sCode, long nQty, long nPrice, WideString sHogaGb,
                                     WideString sCreditGb, WideString sLoanDate, WideString sOrgOrderNo)
{
  _TDispID _dispid(*this, OLETEXT("SendOrderCredit"), DISPID(48));
  TAutoArgs<11> _args;
  _args[1] = sRQName /*[VT_WideString:0]*/;
  _args[2] = sScreenNo /*[VT_WideString:0]*/;
  _args[3] = sAccNo /*[VT_WideString:0]*/;
  _args[4] = nOrderType /*[VT_I4:0]*/;
  _args[5] = sCode /*[VT_WideString:0]*/;
  _args[6] = nQty /*[VT_I4:0]*/;
  _args[7] = nPrice /*[VT_I4:0]*/;
  _args[8] = sHogaGb /*[VT_WideString:0]*/;
  _args[9] = sCreditGb /*[VT_WideString:0]*/;
  _args[10] = sLoanDate /*[VT_WideString:0]*/;
  _args[11] = sOrgOrderNo /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::KOA_Functions(WideString sFunctionName, WideString sParam)
{
  _TDispID _dispid(*this, OLETEXT("KOA_Functions"), DISPID(49));
  TAutoArgs<2> _args;
  _args[1] = sFunctionName /*[VT_WideString:0]*/;
  _args[2] = sParam /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::SetInfoData(WideString sInfoData)
{
  _TDispID _dispid(*this, OLETEXT("SetInfoData"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = sInfoData /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::SetRealReg(WideString strScreenNo, WideString strCodeList, WideString strFidList, WideString strOptType)
{
  _TDispID _dispid(*this, OLETEXT("SetRealReg"), DISPID(51));
  TAutoArgs<4> _args;
  _args[1] = strScreenNo /*[VT_WideString:0]*/;
  _args[2] = strCodeList /*[VT_WideString:0]*/;
  _args[3] = strFidList /*[VT_WideString:0]*/;
  _args[4] = strOptType /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::GetConditionLoad()
{
  _TDispID _dispid(*this, OLETEXT("GetConditionLoad"), DISPID(52));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> WideString __fastcall
_DKHOpenAPIDispT<T>::GetConditionNameList()
{
  _TDispID _dispid(*this, OLETEXT("GetConditionNameList"), DISPID(53));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::SendCondition(WideString strScrNo, WideString strConditionName, int nIndex, int nSearch)
{
  _TDispID _dispid(*this, OLETEXT("SendCondition"), DISPID(54));
  TAutoArgs<4> _args;
  _args[1] = strScrNo /*[VT_WideString:0]*/;
  _args[2] = strConditionName /*[VT_WideString:0]*/;
  _args[3] = nIndex /*[VT_INT:0]*/;
  _args[4] = nSearch /*[VT_INT:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DKHOpenAPIDispT<T>::SendConditionStop(WideString strScrNo, WideString strConditionName, int nIndex)
{
  _TDispID _dispid(*this, OLETEXT("SendConditionStop"), DISPID(55));
  TAutoArgs<3> _args;
  _args[1] = strScrNo /*[VT_WideString:0]*/;
  _args[2] = strConditionName /*[VT_WideString:0]*/;
  _args[3] = nIndex /*[VT_INT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> VARIANT __fastcall
_DKHOpenAPIDispT<T>::GetCommDataEx(WideString strTrCode, WideString strRecordName)
{
  _TDispID _dispid(*this, OLETEXT("GetCommDataEx"), DISPID(56));
  TAutoArgs<2> _args;
  _args[1] = strTrCode /*[VT_WideString:0]*/;
  _args[2] = strRecordName /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DKHOpenAPIDispT<T>::SetRealRemove(WideString strScrNo, WideString strDelCode)
{
  _TDispID _dispid(*this, OLETEXT("SetRealRemove"), DISPID(57));
  TAutoArgs<2> _args;
  _args[1] = strScrNo /*[VT_WideString:0]*/;
  _args[2] = strDelCode /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> long __fastcall
_DKHOpenAPIDispT<T>::GetMarketType(WideString sTrCode)
{
  _TDispID _dispid(*this, OLETEXT("GetMarketType"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DKHOpenAPIEvents
// Flags:     (4096) Dispatchable
// GUID:      {7335F12D-8973-4BD5-B7F0-12DF03D175B7}
// *********************************************************************//
template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveTrData(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sRecordName
                                           , WideString sPrevNext, long nDataLength, WideString sErrorCode,
                                           WideString sMessage, WideString sSplmMsg)
{
  _TDispID _dispid(/* OnReceiveTrData */ DISPID(1));
  TAutoArgs<9> _args;
  _args[1] = sScrNo /*[VT_WideString:0]*/;
  _args[2] = sRQName /*[VT_WideString:0]*/;
  _args[3] = sTrCode /*[VT_WideString:0]*/;
  _args[4] = sRecordName /*[VT_WideString:0]*/;
  _args[5] = sPrevNext /*[VT_WideString:0]*/;
  _args[6] = nDataLength /*[VT_I4:0]*/;
  _args[7] = sErrorCode /*[VT_WideString:0]*/;
  _args[8] = sMessage /*[VT_WideString:0]*/;
  _args[9] = sSplmMsg /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveRealData(WideString sRealKey, WideString sRealType, WideString sRealData)
{
  _TDispID _dispid(/* OnReceiveRealData */ DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = sRealKey /*[VT_WideString:0]*/;
  _args[2] = sRealType /*[VT_WideString:0]*/;
  _args[3] = sRealData /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveMsg(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sMsg)
{
  _TDispID _dispid(/* OnReceiveMsg */ DISPID(3));
  TAutoArgs<4> _args;
  _args[1] = sScrNo /*[VT_WideString:0]*/;
  _args[2] = sRQName /*[VT_WideString:0]*/;
  _args[3] = sTrCode /*[VT_WideString:0]*/;
  _args[4] = sMsg /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveChejanData(WideString sGubun, long nItemCnt, WideString sFIdList)
{
  _TDispID _dispid(/* OnReceiveChejanData */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = sGubun /*[VT_WideString:0]*/;
  _args[2] = nItemCnt /*[VT_I4:0]*/;
  _args[3] = sFIdList /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnEventConnect(long nErrCode)
{
  _TDispID _dispid(/* OnEventConnect */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = nErrCode /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveInvestRealData(WideString sRealKey)
{
  _TDispID _dispid(/* OnReceiveInvestRealData */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = sRealKey /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveRealCondition(WideString sTrCode, WideString strType, WideString strConditionName
                                                  , WideString strConditionIndex)
{
  _TDispID _dispid(/* OnReceiveRealCondition */ DISPID(7));
  TAutoArgs<4> _args;
  _args[1] = sTrCode /*[VT_WideString:0]*/;
  _args[2] = strType /*[VT_WideString:0]*/;
  _args[3] = strConditionName /*[VT_WideString:0]*/;
  _args[4] = strConditionIndex /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveTrCondition(WideString sScrNo, WideString strCodeList, WideString strConditionName
                                                , int nIndex, int nNext)
{
  _TDispID _dispid(/* OnReceiveTrCondition */ DISPID(8));
  TAutoArgs<5> _args;
  _args[1] = sScrNo /*[VT_WideString:0]*/;
  _args[2] = strCodeList /*[VT_WideString:0]*/;
  _args[3] = strConditionName /*[VT_WideString:0]*/;
  _args[4] = nIndex /*[VT_INT:0]*/;
  _args[5] = nNext /*[VT_INT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DKHOpenAPIEventsDispT<T>::OnReceiveConditionVer(long lRet, WideString sMsg)
{
  _TDispID _dispid(/* OnReceiveConditionVer */ DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = lRet /*[VT_I4:0]*/;
  _args[2] = sMsg /*[VT_WideString:0]*/;
  OleProcedure(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : KHOpenAPI
// Event Interface : _DKHOpenAPIEvents
// *********************************************************************//
template <class T>
class TEvents_KHOpenAPI : public IConnectionPointImpl<T,
                                                 &DIID__DKHOpenAPIEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnReceiveTrData(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sRecordName,
                                       WideString sPrevNext, long nDataLength, WideString sErrorCode,
                                       WideString sMessage, WideString sSplmMsg);
  void            Fire_OnReceiveRealData(WideString sRealKey, WideString sRealType, WideString sRealData);
  void            Fire_OnReceiveMsg(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sMsg);
  void            Fire_OnReceiveChejanData(WideString sGubun, long nItemCnt, WideString sFIdList);
  void            Fire_OnEventConnect(long nErrCode);
  void            Fire_OnReceiveInvestRealData(WideString sRealKey);
  void            Fire_OnReceiveRealCondition(WideString sTrCode, WideString strType, WideString strConditionName,
                                              WideString strConditionIndex);
  void            Fire_OnReceiveTrCondition(WideString sScrNo, WideString strCodeList, WideString strConditionName,
                                            int nIndex, int nNext);
  void            Fire_OnReceiveConditionVer(long lRet, WideString sMsg);
protected:
  _DKHOpenAPIEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveTrData(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sRecordName,
                                           WideString sPrevNext, long nDataLength, WideString sErrorCode,
                                           WideString sMessage, WideString sSplmMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveTrData(sScrNo, sRQName, sTrCode, sRecordName, sPrevNext, nDataLength, 
                                     sErrorCode, sMessage, sSplmMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveRealData(WideString sRealKey, WideString sRealType, WideString sRealData)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveRealData(sRealKey, sRealType, sRealData);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveMsg(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveMsg(sScrNo, sRQName, sTrCode, sMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveChejanData(WideString sGubun, long nItemCnt, WideString sFIdList)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveChejanData(sGubun, nItemCnt, sFIdList);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnEventConnect(long nErrCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEventConnect(nErrCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveInvestRealData(WideString sRealKey)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveInvestRealData(sRealKey);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveRealCondition(WideString sTrCode, WideString strType, WideString strConditionName,
                                                  WideString strConditionIndex)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveRealCondition(sTrCode, strType, strConditionName, strConditionIndex);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveTrCondition(WideString sScrNo, WideString strCodeList, WideString strConditionName,
                                                int nIndex, int nNext)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveTrCondition(sScrNo, strCodeList, strConditionName, nIndex, nNext);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_KHOpenAPI<T>::Fire_OnReceiveConditionVer(long lRet, WideString sMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveConditionVer(lRet, sMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : KHOpenAPI
// Event Interface : _DKHOpenAPIEvents
// *********************************************************************//
template <typename T>
class IKHOpenAPI_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnReceiveTrData(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sRecordName,
                            WideString sPrevNext, long nDataLength, WideString sErrorCode, WideString sMessage,
                            WideString sSplmMsg)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveTrData(sScrNo, sRQName, sTrCode, sRecordName, sPrevNext, nDataLength, 
                                  sErrorCode, sMessage, sSplmMsg);
  }

  void Fire_OnReceiveRealData(WideString sRealKey, WideString sRealType, WideString sRealData)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveRealData(sRealKey, sRealType, sRealData);
  }

  void Fire_OnReceiveMsg(WideString sScrNo, WideString sRQName, WideString sTrCode, WideString sMsg)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveMsg(sScrNo, sRQName, sTrCode, sMsg);
  }

  void Fire_OnReceiveChejanData(WideString sGubun, long nItemCnt, WideString sFIdList)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveChejanData(sGubun, nItemCnt, sFIdList);
  }

  void Fire_OnEventConnect(long nErrCode)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEventConnect(nErrCode);
  }

  void Fire_OnReceiveInvestRealData(WideString sRealKey)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveInvestRealData(sRealKey);
  }

  void Fire_OnReceiveRealCondition(WideString sTrCode, WideString strType, WideString strConditionName,
                                   WideString strConditionIndex)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveRealCondition(sTrCode, strType, strConditionName, strConditionIndex);
  }

  void Fire_OnReceiveTrCondition(WideString sScrNo, WideString strCodeList, WideString strConditionName, int nIndex,
                                 int nNext)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveTrCondition(sScrNo, strCodeList, strConditionName, nIndex, nNext);
  }

  void Fire_OnReceiveConditionVer(long lRet, WideStringh sMsg)
  {
    _DKHOpenAPIEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceiveConditionVer(lRet, sMsg);
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Khopenapilib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Khopenapilib_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // KHOpenAPILib_TLBH
